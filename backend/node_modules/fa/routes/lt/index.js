// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const moment = require('moment');
const addRoute = require('./add');
const editRoute = require('./edit');
const findByRidRoute = require('./findByRid');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    FaLt,
    canAccess
  } = module;

  const canView = user.auth('FA:VIEW', 'FA:LT:VIEW');
  const canAdd = user.auth('FA:MANAGE', 'FA:LT:MANAGE', 'FA:LT:ADD');
  const canEdit = canView;
  const canDelete = user.auth('FA:MANAGE', 'FA:LT:MANAGE');

  express.get('/fa/lt;rid', canView, findByRidRoute.bind(null, app, module));
  express.get(
    '/fa/lt',
    canView,
    limitBrowse,
    prepareSearch,
    express.crud.browseRoute.bind(null, app, FaLt)
  );
  express.post('/fa/lt', canAdd, addRoute.bind(null, app, module));
  express.get('/fa/lt/:id', canView, express.crud.readRoute.bind(null, app, {
    model: FaLt,
    prepareResult: prepareReadResult
  }));
  express.put('/fa/lt/:id', canEdit, editRoute.bind(null, app, module));
  express.delete('/fa/lt/:id', canDelete, express.crud.deleteRoute.bind(null, app, FaLt));

  express.get(
    '/fa/lt;export.:format?',
    canView,
    limitBrowse,
    prepareSearch,
    setUpExport,
    express.crud.exportRoute.bind(null, app, {
      filename: 'FA_LT',
      freezeRows: 1,
      freezeColumns: 1,
      columns: {
        protocolNo: 15,
        documentNo: 15,
        stage: 15,
        kind: 10,
        protocolDate: 'date+utc',
        documentDate: 'date+utc',
        inventoryNo: 15,
        assetName: 40,
        costCenter: 10,
        owner: 20,
        applicant: 20,
        committee: 20,
        cause: 40,
        initialValue: {type: 'decimal', decimals: 2},
        fiscalDeprecationValue: {type: 'decimal', decimals: 2},
        fiscalNetValue: {type: 'decimal', decimals: 2},
        economicInitialValue: {type: 'decimal', decimals: 2},
        economicDeprecationValue: {type: 'decimal', decimals: 2},
        economicNetValue: {type: 'decimal', decimals: 2},
        mergeInventoryNo: 15,
        mergeLineSymbol: 10,
        mergeType: 10,
        buyerName: 20,
        buyerAddress: 30,
        saleValue: {type: 'decimal', decimals: 2},
        postingDate: 'date+utc',
        valuationDate: 'date+utc',
        assetNo: 30,
        transactionType: 30,
        subAssetNo: 10,
        accountingNo: 10,
        odwNo: 10,
        tplNotes: 100,
        comments: 100
      },
      serializeRow: serializeRow,
      cleanUp: cleanUpExport,
      model: FaLt
    })
  );

  function limitBrowse(req, res, next)
  {
    const sessionUser = req.session.user;
    const privileges = sessionUser.privileges || [];

    if (!privileges.includes('SUPER') && !privileges.includes('FA:VIEW:ALL'))
    {
      const allowedStages = FaLt.STAGES.filter(stage => privileges.includes(`${FaLt.PRIVILEGE_PREFIX}:${stage}`));

      req.rql.selector.args.push({
        name: 'or',
        args: [
          {name: 'eq', args: ['users', sessionUser._id]},
          {name: 'in', args: ['stage', allowedStages]}
        ]
      });
    }

    next();
  }

  function prepareSearch(req, res, next)
  {
    FaLt.SEARCH_PROPS.forEach(prop =>
    {
      const text = req.query[prop];

      if (typeof text !== 'string' || !text.length)
      {
        return;
      }

      const searchText = FaLt.prepareSearchText(text);

      if (!searchText.length)
      {
        return;
      }

      req.rql.selector.args.forEach(term =>
      {
        if (term.name === 'eq' && term.args[0] === prop)
        {
          term.name = 'regex';
          term.args = [`${prop}Search`, _.escapeRegExp(searchText)];
        }
      });
    });

    next();
  }

  function setUpExport(req, res, next)
  {
    req.rql.fields = {};
    req.dictionaries = {};

    next();
  }

  function cleanUpExport(req)
  {
    req.dictionaries = null;
  }

  function serializeRow(doc)
  {
    return {
      protocolNo: doc.protocolNo,
      documentNo: doc.protocolNo,
      stage: doc.stage,
      kind: doc.kind,
      protocolDate: doc.protocolDate,
      documentDate: doc.documentDate,
      inventoryNo: doc.inventoryNo,
      assetName: doc.assetName,
      costCenter: doc.costCenter,
      owner: doc.owner ? doc.owner.label : '',
      applicant: doc.applicant ? doc.applicant.label : '',
      committee: doc.committee.map(u => u.label).join('\r\n'),
      cause: doc.cause,
      initialValue: doc.initialValue,
      fiscalDeprecationValue: doc.deprecationValue,
      fiscalNetValue: doc.netValue,
      economicInitialValue: doc.economicInitialValue,
      economicDeprecationValue: doc.economicDeprecationValue,
      economicNetValue: doc.economicNetValue,
      mergeInventoryNo: doc.mergeInventoryNo,
      mergeLineSymbol: doc.mergeLineSymbol,
      mergeType: doc.mergeType,
      buyerName: doc.buyerName,
      buyerAddress: doc.buyerAddress,
      saleValue: doc.saleValue,
      postingDate: doc.postingDate,
      valuationDate: doc.valuationDate,
      assetNo: doc.assets.map(a => a.no).join('; '),
      transactionType: doc.assets.map(a => a.transactionType).join('; '),
      subAssetNo: doc.subAssetNo,
      accountingNo: doc.assets.map(a => a.accountingNo).join('; '),
      odwNo: doc.odwNo,
      tplNotes: doc.tplNotes,
      comments: doc.changes
        .filter(c => !!c.comment)
        .map(c => `${c.user.label} @ ${moment(c.date).format('L LT')}: ${c.comment.replace(/\n/g, '\t\n')}`)
        .join('\r\n---\r\n')
    };
  }

  function prepareReadResult(doc, formatResult, req)
  {
    if (!canAccess(FaLt, req.session.user, doc))
    {
      formatResult(app.createError('Not allowed.', 'AUTH', 403));
    }
    else
    {
      formatResult(null, doc);
    }
  }
};
