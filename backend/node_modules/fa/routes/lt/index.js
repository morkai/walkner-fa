// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const moment = require('moment');
const browseRoute = require('./browse');
const addRoute = require('./add');
const editRoute = require('./edit');
const findByRidRoute = require('./findByRid');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    FaLt
  } = module;

  const canView = user.auth('FA:VIEW', 'FA:LT:VIEW');
  const canAdd = user.auth('FA:MANAGE', 'FA:LT:MANAGE', 'FA:LT:protocol');
  const canEdit = canView;
  const canDelete = user.auth('FA:MANAGE', 'FA:LT:MANAGE');

  express.get('/fa/lt;rid', canView, findByRidRoute.bind(null, app, module));
  express.get('/fa/lt', canView, browseRoute.bind(null, app, module));
  express.post('/fa/lt', canAdd, addRoute.bind(null, app, module));
  express.get('/fa/lt/:id', canView, express.crud.readRoute.bind(null, app, FaLt));
  express.put('/fa/lt/:id', canEdit, editRoute.bind(null, app, module));
  express.delete('/fa/lt/:id', canDelete, express.crud.deleteRoute.bind(null, app, FaLt));

  express.get('/fa/lt;export.:format?', canView, setUpExport, express.crud.exportRoute.bind(null, app, {
    filename: 'FA_LT',
    freezeRows: 1,
    freezeColumns: 1,
    columns: {
      no: 15,
      stage: 15,
      kind: 10,
      date: 'date+utc',
      inventoryNo: 20,
      assetName: 40,
      usageDestination: 15,
      applicant: 20,
      cause: 40,
      initialValue: {type: 'decimal', decimals: 2},
      fiscalDeprecationValue: {type: 'decimal', decimals: 2},
      fiscalNetValue: {type: 'decimal', decimals: 2},
      economicDeprecationValue: {type: 'decimal', decimals: 2},
      economicNetValue: {type: 'decimal', decimals: 2},
      mergeInventoryNo: 20,
      mergeLineSymbol: 15,
      mergeType: 10,
      buyerName: 30,
      buyerAddress: 30,
      saleValue: {type: 'decimal', decimals: 2},
      sapNo: 15,
      accountingNo: 15,
      verifyNotes: 30,
      otherNotes: 30,
      mergeNotes: 30,
      comments: 60
    },
    serializeRow: serializeRow,
    cleanUp: cleanUpExport,
    model: FaLt
  }));

  function setUpExport(req, res, next)
  {
    req.rql.fields = {
      changes: 0
    };

    req.dictionaries = {};

    next();
  }

  function cleanUpExport(req)
  {
    req.dictionaries = null;
  }

  function serializeRow(doc)
  {
    return {
      no: `LT/${doc.no}`,
      stage: doc.stage,
      kind: doc.kind,
      inventoryNo: doc.inventoryNo,
      assetName: doc.assetName,
      usageDestination: doc.usageDestination,
      applicant: doc.applicant ? doc.applicant.label : '',
      cause: doc.cause,
      initialValue: doc.initialValue,
      fiscalDeprecationValue: doc.deprecationValue,
      fiscalNetValue: doc.netValue,
      economicDeprecationValue: doc.economicDeprecationValue,
      economicNetValue: doc.economicNetValue,
      mergeInventoryNo: doc.mergeInventoryNo,
      mergeLineSymbol: doc.mergeLineSymbol,
      mergeType: doc.mergeType,
      buyerName: doc.buyerName,
      buyerAddress: doc.buyerAddress,
      saleValue: doc.saleValue,
      sapNo: doc.sapNo,
      accountingNo: doc.accountingNo,
      verifyNotes: doc.verifyNotes,
      otherNotes: doc.otherNotes,
      mergeNotes: doc.mergeNotes,
      comments: doc.changes
        .filter(c => !!c.comment)
        .map(c => `${c.user.label} @ ${moment(c.date).format('L LT')}: ${c.comment.replace(/\n/g, '\t\n')}`)
        .join('\r\n---\r\n')
    };
  }
};
