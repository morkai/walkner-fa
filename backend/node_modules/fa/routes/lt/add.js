// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');

module.exports = (app, module, req, res, next) =>
{
  const {
    user,
    FaLt,
    generateNextNo
  } = module;

  step(
    function()
    {
      if (req.body.kind !== 'merge')
      {
        ['mergeInventoryNo', 'mergeLineSymbol', 'mergeType'].forEach(prop =>
        {
          req.body[prop] = '';
        });
      }

      const createdAt = new Date();
      const createdBy = user.createUserInfo(req.session.user, req);
      const changes = [];

      if (typeof req.body.comment === 'string' && req.body.comment.replace(/[^a-zA-Z0-9]+/g, '').length)
      {
        changes.push({
          date: createdAt,
          user: createdBy,
          data: {},
          comment: req.body.comment
        });
      }

      this.doc = new FaLt({
        createdAt,
        createdBy,
        updatedAt: null,
        updatedBy: null,
        stage: 'protocol',
        stageChangedAt: {
          protocol: null,
          verify: null,
          acceptOwner: null,
          acceptFinance: null,
          acceptDepartment: null,
          acceptDocument: null,
          record: null
        },
        stageChangedBy: {
          protocol: null,
          verify: null,
          acceptOwner: null,
          acceptFinance: null,
          acceptDepartment: null,
          acceptDocument: null,
          record: null
        },
        kind: req.body.kind,
        protocolNo: null,
        documentNo: null,
        protocolDate: moment.utc(moment().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate(),
        documentDate: null,
        inventoryNo: '',
        assetName: '',
        costCenter: null,
        applicant: null,
        committee: [],
        cause: '',
        initialValue: 0,
        deprecationValue: 0,
        netValue: 0,
        economicInitialValue: 0,
        economicDeprecationValue: 0,
        economicNetValue: 0,
        mergeInventoryNo: req.body.mergeInventoryNo || '',
        mergeLineSymbol: req.body.mergeLineSymbol || '',
        mergeType: req.body.mergeType || null,
        buyerName: '',
        buyerAddress: '',
        saleValue: 0,
        sapNo: '',
        accountingNo: '',
        changes
      });

      generateNextNo(this.doc, this.doc.stage, this.next());
    },
    function(err, unlockNoGenerator)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to generate the next document number: ${err.message}`,
          'NO_GENERATION_FAILURE',
          500
        ));
      }

      this.unlockNoGenerator = unlockNoGenerator;

      this.doc.save(this.next());
    },
    function(err)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to save a new document: ${err.message}`,
          'SAVE_FAILURE',
          500
        ));
      }
    },
    function(err)
    {
      if (this.unlockNoGenerator)
      {
        this.unlockNoGenerator();
      }

      if (err)
      {
        return next(err);
      }

      res.json(this.doc);

      app.broker.publish(`${FaLt.TOPIC_PREFIX}.added`, {
        model: this.doc,
        user: this.doc.createdBy
      });
    }
  );
};
