// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const os = require('os');
const path = require('path');
const fs = require('fs-extra');
const contentDisposition = require('content-disposition');

module.exports = (app, module) =>
{
  const {
    express,
    user,
    FaReqTpl,
    FaOt,
    FaLt
  } = module;

  const canView = user.auth('FA:VIEW', 'FA:OT:VIEW', 'FA:LT:VIEW', 'FA:MANAGE');
  const canManage = user.auth('FA:MANAGE');

  express.get('/fa/reqTpls', canView, express.crud.browseRoute.bind(null, app, FaReqTpl));
  express.post('/fa/reqTpls', canManage, express.crud.addRoute.bind(null, app, {
    model: FaReqTpl,
    afterSave: keepInputFile
  }));
  express.get(`/fa/reqTpls/:id.xlsx`, canView, sendInputFileRoute);
  express.get(`/fa/reqTpls/:id;preview`, canView, previewRoute);
  express.get(`/fa/reqTpls/:id`, canView, express.crud.readRoute.bind(null, app, FaReqTpl));
  express.put(`/fa/reqTpls/:id`, canManage, prepareEdit, express.crud.editRoute.bind(null, app, {
    model: FaReqTpl,
    afterSave: keepInputFile
  }));
  express.delete(`/fa/reqTpls/:id`, canManage, express.crud.deleteRoute.bind(null, app, FaReqTpl));

  function keepInputFile(model, req)
  {
    const attachment = module.tmpAttachments.get(model.inputFile.hash);

    if (attachment)
    {
      clearTimeout(attachment.timer);

      module.tmpAttachments.delete(model.inputFile.hash);

      if (req.oldInputFile)
      {
        fs.unlink(path.join(module.config.uploadsDest, req.oldInputFile.hash), err =>
        {
          if (err)
          {
            module.warn(err, 'Failed to remove old template input file.', {oldInputFile: req.oldInputFile});
          }
        });
      }
    }
  }

  async function prepareEdit(req, res, next)
  {
    try
    {
      req.model = await FaReqTpl.findById(req.params.id).exec();

      if (req.model)
      {
        req.oldInputFile = req.model.inputFile;
      }

      next();
    }
    catch (err)
    {
      next(err);
    }
  }

  async function sendInputFileRoute(req, res, next)
  {
    try
    {
      const reqTpl = await FaReqTpl.findById(req.params.id).select({inputFile: 1}).lean().exec();

      if (!reqTpl)
      {
        throw app.createError('Template not found.', 'NOT_FOUND', 404);
      }

      const {inputFile} = reqTpl;

      res.type(inputFile.type);
      res.append('Content-Disposition', contentDisposition(inputFile.name, {
        type: 'attachment'
      }));
      res.sendFile(path.join(module.config.uploadsDest, inputFile.hash));
    }
    catch (err)
    {
      next(err);
    }
  }

  async function previewRoute(req, res, next)
  {
    try
    {
      const reqTpl = await FaReqTpl.findById(req.params.id).lean().exec();

      if (!reqTpl)
      {
        throw app.createError('Template not found.', 'INPUT', 400);
      }

      const documentNo = (req.query.doc || '').replace(/_/g, '/');

      const docs = await Promise.all([
        FaOt.findOne({documentNo}).exec(),
        FaLt.findOne({$or: [{documentNo}, {protocolNo: documentNo}]}).exec()
      ]);

      const doc = docs.find(doc => !!doc);

      if (!doc)
      {
        throw app.createError('Document not found.', 'INPUT', 400);
      }

      const data = await doc.toReqTpl();

      const outputFile = await FaReqTpl.generate({
        reqTpl,
        data,
        outputFile: path.join(os.tmpdir(), `FA_REQ_TPL_${reqTpl._id}_${Date.now()}_${Math.random()}.xlsx`)
      });

      const outputFileName = FaReqTpl.prepareOutputFileName(reqTpl.outputFileName, doc);

      res.type('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.append('Content-Disposition', contentDisposition(outputFileName, {
        type: 'attachment'
      }));
      res.sendFile(outputFile, err =>
      {
        if (err)
        {
          next(err);
        }

        if (outputFile)
        {
          fs.unlink(outputFile, () => {});
        }
      });
    }
    catch (err)
    {
      next(err);
    }
  }
};
