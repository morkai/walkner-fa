// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const moment = require('moment');
const step = require('h5.step');
const browseRoute = require('./browse');
const addRoute = require('./add');
const editRoute = require('./edit');
const findByRidRoute = require('./findByRid');

module.exports = (app, module) =>
{
  const {
    mongoose,
    express,
    user,
    FaOt
  } = module;

  const canView = user.auth('FA:VIEW', 'FA:OT:VIEW');
  const canAdd = user.auth('FA:MANAGE', 'FA:OT:MANAGE', 'FA:OT:protocol', 'FA:OT:document');
  const canEdit = canView;
  const canDelete = user.auth('FA:MANAGE', 'FA:OT:MANAGE');

  express.get('/fa/ot;rid', canView, findByRidRoute.bind(null, app, module));
  express.get('/fa/ot', canView, browseRoute.bind(null, app, module));
  express.post('/fa/ot', canAdd, addRoute.bind(null, app, module));
  express.get('/fa/ot/:id', canView, express.crud.readRoute.bind(null, app, FaOt));
  express.put('/fa/ot/:id', canEdit, editRoute.bind(null, app, module));
  express.delete('/fa/ot/:id', canDelete, express.crud.deleteRoute.bind(null, app, FaOt));

  express.get('/fa/ot;export.:format?', canView, setUpExport, express.crud.exportRoute.bind(null, app, {
    filename: 'FA_OT',
    freezeRows: 1,
    freezeColumns: 1,
    columns: {
      protocolNo: 15,
      documentNo: 15,
      stage: 15,
      protocolNeeded: 'boolean',
      commissioningType: 10,
      usageDestination: 15,
      protocolDate: 'date+utc',
      documentDate: 'date+utc',
      inventoryNo: 15,
      assetName: 40,
      lineSymbol: 10,
      zplx: 30,
      owner: 20,
      committee: 20,
      supplier: 30,
      value: 'decimal',
      destination: 20,
      costCenter: 10,
      vendorNo: 10,
      vendorName: 30,
      deprecationRate: 'percent',
      economicPeriod: 'integer',
      fiscalPeriod: 'integer',
      sapNo: 10,
      accountingNo: 10,
      comments: 100
    },
    serializeRow: serializeRow,
    cleanUp: cleanUpExport,
    model: FaOt
  }));

  function setUpExport(req, res, next)
  {
    req.rql.fields = {};
    req.dictionaries = {};

    step(
      function()
      {
        _.forEach(module.DICTIONARIES, (modelName) =>
        {
          mongoose.model(modelName).find({}, {name: 1}).lean().exec(this.group());
        });
      },
      function(err, dictionaries)
      {
        if (err)
        {
          return next(err);
        }

        Object.keys(module.DICTIONARIES).forEach((dictionaryName, i) =>
        {
          req.dictionaries[dictionaryName] = {};

          dictionaries[i].forEach((dictionaryModel) =>
          {
            req.dictionaries[dictionaryName][dictionaryModel._id] = dictionaryModel.name;
          });
        });

        setImmediate(next);
      }
    );
  }

  function cleanUpExport(req)
  {
    req.dictionaries = null;
  }

  function serializeRow(doc, req)
  {
    const destination = req.dictionaries.destinations[doc.destination];

    return {
      protocolNo: doc.protocolNo,
      documentNo: doc.documentNo,
      stage: doc.stage,
      protocolNeeded: doc.protocolNeeded,
      commissioningType: doc.commissioningType,
      usageDestination: doc.usageDestination,
      protocolDate: doc.protocolDate,
      documentDate: doc.documentDate,
      inventoryNo: doc.inventoryNo,
      assetName: doc.assetName,
      lineSymbol: doc.lineSymbol,
      zplx: doc.zplx
        .map(zplx =>
        {
          const value = zplx.value.toLocaleString('pl-PL', {
            style: 'currency',
            currency: 'PLN'
          });

          return `ZPLX${zplx.code} (${value})`;
        })
        .join('\r\n'),
      owner: doc.owner ? doc.owner.label : '',
      committee: doc.committee.map(u => u.label).join('\r\n'),
      supplier: doc.supplier,
      value: doc.value,
      destination: destination ? destination.name : doc.destination,
      costCenter: doc.costCenter,
      vendorNo: doc.vendorNo,
      vendorName: doc.vendorName,
      deprecationRate: doc.deprecationRate / 100,
      economicPeriod: doc.economicPeriod,
      fiscalPeriod: doc.fiscalPeriod,
      sapNo: doc.sapNo,
      accountingNo: doc.accountingNo,
      comments: doc.changes
        .filter(c => !!c.comment)
        .map(c => `${c.user.label} @ ${moment(c.date).format('L LT')}: ${c.comment.replace(/\n/g, '\t\n')}`)
        .join('\r\n---\r\n')
    };
  }
};
