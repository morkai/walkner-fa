// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');
const moment = require('moment');
const arrayToObject = require('util/arrayToObject');

module.exports = (app, module, req, res, next) =>
{
  const {
    user,
    FaOt,
    generateNextNo
  } = module;

  step(
    function()
    {
      const date = moment.utc(moment().format('YYYY-MM-DD'), 'YYYY-MM-DD').toDate();
      const protocolNeeded = !!req.body.protocolNeeded;

      this.doc = new FaOt({
        createdAt: new Date(),
        createdBy: user.createUserInfo(req.session.user, req),
        stage: protocolNeeded ? 'protocol' : 'document',
        stageChangedAt: arrayToObject(FaOt.STAGES, null),
        stageChangedBy: arrayToObject(FaOt.STAGES, null),
        protocolNeeded: protocolNeeded,
        commissioningType: req.body.commissioningType,
        usageDestination: req.body.usageDestination,
        protocolDate: protocolNeeded ? date : null,
        documentDate: protocolNeeded ? null : date
      });

      generateNextNo(this.doc, this.doc.stage, this.next());
    },
    function(err, unlockNoGenerator)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to generate the next document number: ${err.message}`,
          'NO_GENERATION_FAILURE',
          500
        ));
      }

      this.unlockNoGenerator = unlockNoGenerator;

      this.doc.save(this.next());
    },
    function(err)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to save a new document: ${err.message}`,
          'SAVE_FAILURE',
          500
        ));
      }
    },
    function(err)
    {
      if (this.unlockNoGenerator)
      {
        this.unlockNoGenerator();
      }

      if (err)
      {
        return next(err);
      }

      res.json(this.doc);

      app.broker.publish(`${FaOt.TOPIC_PREFIX}.added`, {
        model: this.doc,
        user: this.doc.createdBy
      });
    }
  );
};
