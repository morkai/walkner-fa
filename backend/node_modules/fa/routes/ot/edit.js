// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const step = require('h5.step');

module.exports = (app, module, req, res, next) =>
{
  const {
    user,
    FaOt
  } = module;

  step(
    function()
    {
      FaOt.findById(req.params.id).exec(this.next());
    },
    function(err, doc)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to find a document: ${err.message}`,
          'FIND_FAILURE',
          500,
          {documentId: req.params.id}
        ));
      }

      if (!doc)
      {
        return this.skip(app.createError('Document not found.', 'NOT_FOUND', 404));
      }

      const props = Object.keys(req.body);
      const canEdit = user.isAllowedTo(req.session.user, [
        ['FA:MANAGE'], ['FA:OT:MANAGE'], [`FA:OT:${doc.stage}`]
      ]);
      const canComment = user.isAllowedTo(req.session.user, [
        ['FA:VIEW'], ['FA:OT:VIEW']
      ]);
      const commentOnly = props.includes('comment') && props.length === 1;

      if (!canEdit)
      {
        if (!canComment || !commentOnly)
        {
          return this.skip(app.createError('Not allowed.', 'NO_AUTH', 403));
        }
      }

      props.forEach(prop =>
      {
        if (!prop.endsWith('File'))
        {
          return;
        }

        const attachment = req.body[prop];

        if (!attachment)
        {
          return;
        }

        const tmpAttachment = module.tmpAttachments.get(attachment.hash);

        if (!tmpAttachment)
        {
          return;
        }

        clearTimeout(tmpAttachment.timer);

        module.tmpAttachments.delete(attachment.hash);
      });

      this.doc = doc;
      this.changed = doc.applyChanges(req.body, user.createUserInfo(req.session.user, req));

      if (this.changed)
      {
        doc.save(this.next());
      }
    },
    function(err)
    {
      if (err)
      {
        return this.skip(app.createError(
          `Failed to save a document: ${err.message}`,
          'SAVE_FAILURE',
          500,
          {documentId: req.params.id}
        ));
      }
    },
    function(err)
    {
      if (err)
      {
        return next(err);
      }

      if (!this.changed)
      {
        res.sendStatus(204);

        return;
      }

      res.json(this.doc);

      app.broker.publish(`${FaOt.TOPIC_PREFIX}.edited`, {
        model: this.doc,
        user: this.doc.updatedBy
      });

      const change = this.doc.changes[this.doc.changes.length - 1].toJSON();
      const omit = ['changes'].concat(Object.keys(change.data));

      app.broker.publish(`${FaOt.TOPIC_PREFIX}.updated.${this.doc._id}`, {
        _id: this.doc._id,
        values: this.doc.lastModifiedValues({omit}),
        change
      });
    }
  );
};
