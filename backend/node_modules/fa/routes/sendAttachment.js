// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const contentDisposition = require('content-disposition');

module.exports = (app, module, req, res, next) =>
{
  const models = {
    ot: module.FaOt,
    lt: module.FaLt
  };
  const {documentType, documentId, attachmentProp} = req.params;
  const assetId = req.query.asset;
  const Model = models[documentType];

  if (!Model)
  {
    return next(app.createError('Invalid document type.', 'INPUT', 400));
  }

  const fileProp = `${attachmentProp}File`;
  const fields = {};

  if (req.query.change >= 0)
  {
    fields.changes = 1;
  }
  else if (assetId)
  {
    fields['assets._id'] = 1;
    fields[`assets.${fileProp}`] = 1;
  }
  else
  {
    fields[fileProp] = 1;
  }

  Model.findById(documentId).select(fields).lean().exec((err, doc) =>
  {
    if (err)
    {
      return next(err);
    }

    let attachment;

    if (doc.changes)
    {
      const change = doc.changes[req.query.change];

      if (change && change.data.assets && assetId)
      {
        const assetsChange = change.data.assets[1];
        const asset = (assetsChange.added || []).find(a => a._id === assetId)
          || (assetsChange.edited || []).find(a => a._id === assetId)
          || (assetsChange.deleted || []).find(a => a._id === assetId);
        const assetData = req.query.old === '1' ? asset.old : asset;

        if (assetData)
        {
          attachment = assetData[fileProp];
        }
      }
      else if (change && change.data[fileProp])
      {
        attachment = change.data[fileProp][req.query.old === '1' ? 0 : 1];
      }
    }
    else if (doc.assets)
    {
      const asset = doc.assets.find(a => a._id === req.query.asset);

      if (asset)
      {
        attachment = asset[fileProp];
      }
    }
    else
    {
      attachment = doc[fileProp];
    }

    if (!attachment)
    {
      return next(app.createError(`Attachment not found.`, 'NOT_FOUND', 404));
    }

    res.type(attachment.type);
    res.append('Content-Disposition', contentDisposition(attachment.name, {
      type: req.query.download === '1' ? 'attachment' : 'inline'
    }));
    res.sendFile(path.join(module.config.uploadsDest, attachment.hash));
  });
};
