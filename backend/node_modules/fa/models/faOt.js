// Part of <https://miracle.systems/p/walkner-fa> licensed under <CC BY-NC-SA 4.0>

'use strict';

const _ = require('lodash');
const deepEqual = require('deep-equal');
const {transliterate} = require('transliteration');
const lastModifiedPaths = require('h5-mongoose/plugins/lastModifiedPaths');
const userInfoSchema = require('user/models/userInfoSchema');

exports.name = 'FaOt';

exports.setUp = (app, mongoose) =>
{
  const STAGE_PROPS = {
    protocol: [
      'stage',
      'protocolDate',
      'inventoryNo',
      'assetName',
      'lineSymbol',
      'zplx',
      'owner',
      'committee',
      'supplier',
      'protocolFile'
    ],
    authorize: [
      'stage',
      'protocolFile'
    ],
    document: [
      'stage',
      'documentDate',
      'assetName',
      'lineSymbol',
      'zplx',
      'supplier',
      'value',
      'destination',
      'costCenter',
      'vendorNo',
      'vendorName',
      'checklistFile',
      'certificateFile',
      'nameplateFile'
    ],
    verify: [
      'stage',
      'inventoryNo',
      'redemptionRate',
      'economicPeriod',
      'fiscalPeriod'
    ],
    accept: [
      'stage'
    ],
    record: [
      'stage',
      'sapNo',
      'accountingNo'
    ],
    finished: [
      'protocolDate',
      'documentDate',
      'inventoryNo',
      'lineSymbol',
      'assetName',
      'zplx',
      'owner',
      'committee',
      'supplier',
      'value',
      'costCenter',
      'destination',
      'vendorNo',
      'vendorName',
      'redemptionRate',
      'economicPeriod',
      'fiscalPeriod',
      'sapNo',
      'accountingNo',
      'protocolFile',
      'checklistFile',
      'certificateFile',
      'nameplateFile'
    ]
  };

  const attachmentSchema = new mongoose.Schema({
    hash: String,
    type: String,
    size: Number,
    name: String
  }, {
    _id: false
  });

  const zplxSchema = new mongoose.Schema({
    code: {
      type: String,
      match: /^[0-9]{8}$/,
      minlength: 8,
      maxlength: 8
    },
    value: {
      type: Number,
      min: 0
    }
  }, {
    _id: false
  });

  const changeSchema = new mongoose.Schema({
    date: {
      type: Date,
      required: true
    },
    user: userInfoSchema,
    data: {},
    comment: {
      type: String,
      trim: true,
      default: ''
    }
  }, {
    _id: false,
    minimize: false
  });

  const otSchema = new mongoose.Schema({
    createdAt: Date,
    createdBy: userInfoSchema,
    updatedAt: Date,
    updatedBy: userInfoSchema,
    stage: {
      type: String,
      required: true,
      enum: [
        'protocol',
        'authorize',
        'document',
        'verify',
        'accept',
        'record',
        'finished'
      ]
    },
    stageChangedAt: {
      protocol: Date,
      authorize: Date,
      document: Date,
      verify: Date,
      accept: Date,
      record: Date
    },
    stageChangedBy: {
      protocol: userInfoSchema,
      authorize: userInfoSchema,
      document: userInfoSchema,
      verify: userInfoSchema,
      accept: userInfoSchema,
      record: userInfoSchema
    },
    protocolNeeded: {
      type: Boolean,
      required: true
    },
    commissioningType: {
      type: String,
      required: true,
      enum: [null, 'new-asset', 'inc-asset']
    },
    usageDestination: {
      type: String,
      required: true,
      enum: ['factory', 'external-supplier']
    },
    no: {
      type: String,
      trim: true,
      match: /^[0-9]{1,4}\/[0-9]{1,2}\/[0-9]{4}$/
    },
    date: Date,
    protocolDate: Date,
    documentDate: Date,
    inventoryNo: {
      type: String,
      trim: true
    },
    assetName: {
      type: String,
      trim: true
    },
    assetNameSearch: String,
    lineSymbol: {
      type: String,
      trim: true
    },
    zplx: [zplxSchema],
    owner: userInfoSchema,
    committee: [userInfoSchema],
    supplier: {
      type: String,
      trim: true
    },
    supplierSearch: String,
    protocolFile: attachmentSchema,
    value: {
      type: Number,
      min: 0
    },
    destination: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'FaDestination'
    },
    costCenter: {
      type: String,
      ref: 'FaCostCenter'
    },
    vendorNo: {
      type: String,
      trim: true
    },
    vendorName: {
      type: String,
      trim: true
    },
    vendorNameSearch: String,
    checklistFile: attachmentSchema,
    certificateFile: attachmentSchema,
    nameplateFile: attachmentSchema,
    redemptionRate: {
      type: Number,
      min: 0,
      max: 100
    },
    economicPeriod: {
      type: Number,
      min: 0,
      max: 1200
    },
    fiscalPeriod: {
      type: Number,
      min: 0,
      max: 1200
    },
    sapNo: {
      type: String,
      trim: true
    },
    accountingNo: {
      type: String,
      trim: true
    },
    changes: [changeSchema]
  }, {
    id: false,
    minimize: false
  });

  otSchema.statics.TOPIC_PREFIX = 'fa.ot';
  otSchema.statics.BROWSE_LIMIT = 100;
  otSchema.statics.SEARCH_PROPS = ['assetName', 'supplier', 'vendorName'];

  otSchema.index({createdAt: -1});
  otSchema.index({date: -1});
  otSchema.index({stage: 1});
  otSchema.index({no: 1});
  otSchema.index({inventoryNo: 1});
  otSchema.index({sapNo: 1});
  otSchema.index({accountingNo: 1});
  otSchema.index({costCenter: 1});
  otSchema.index({vendorNo: 1});
  otSchema.statics.SEARCH_PROPS.forEach(prop => otSchema.index({[`${prop}Search`]: 1}));

  otSchema.pre('save', function(next)
  {
    otSchema.statics.SEARCH_PROPS.forEach(prop =>
    {
      if (this.isNew || this.isModified(prop))
      {
        this[`${prop}Search`] = this.constructor.prepareSearchText(this[prop]);
      }
    });

    this.date = this.documentDate || this.protocolDate;

    next();
  });

  otSchema.plugin(lastModifiedPaths);

  otSchema.statics.prepareSearchText = function(value)
  {
    return transliterate(value, {unknown: ''})
      .replace(/[^A-Za-z0-9]+/g, '')
      .toUpperCase();
  };

  otSchema.methods.applyChanges = function(input, updatedBy)
  {
    this.updatedAt = new Date();
    this.updatedBy = updatedBy;

    const currentStage = this.stage;
    const comment = input.comment || '';

    input.stage = input.newStage || currentStage;

    if (input.stage !== currentStage)
    {
      const stages = Object.keys(STAGE_PROPS);
      const currentI = stages.indexOf(currentStage);
      const newI = stages.indexOf(input.stage);

      if (currentI + 1 === newI)
      {
        this.stageChangedAt[currentStage] = this.updatedAt;
        this.stageChangedBy[currentStage] = this.updatedBy;
      }
      else if (currentI - 1 === newI)
      {
        this.stageChangedAt[input.stage] = this.updatedAt;
        this.stageChangedBy[input.stage] = this.updatedBy;
      }
      else
      {
        delete input.stage;
      }
    }

    const changes = this.compareProperties(_.pick(input, STAGE_PROPS[currentStage]));

    if (_.isEmpty(changes) && _.isEmpty(comment))
    {
      return false;
    }

    this.changes.push({
      date: this.updatedAt,
      user: updatedBy,
      data: changes,
      comment
    });

    return true;
  };

  otSchema.methods.compareProperties = function(input)
  {
    const changes = {};

    _.forEach(input, (value, key) => { this.compareProperty(key, input, changes); });

    return changes;
  };

  otSchema.methods.compareProperty = function(property, input, changes)
  {
    let oldValue = this[property];
    let newValue = input[property];

    if (_.isObject(oldValue) && _.isFunction(oldValue.toObject))
    {
      oldValue = oldValue.toObject();
    }

    if (_.isObject(newValue) && _.isFunction(newValue.toObject))
    {
      newValue = newValue.toObject();
    }

    if (oldValue instanceof mongoose.Types.ObjectId)
    {
      oldValue = oldValue.toString();
    }

    if (_.isString(newValue))
    {
      newValue = newValue.trim();

      if (/date/i.test(property))
      {
        newValue = new Date(newValue);
      }
    }

    if (deepEqual(newValue, oldValue, {strict: true}))
    {
      return false;
    }

    changes[property] = [oldValue, newValue];
    this[property] = newValue;

    return true;
  };

  mongoose.model(exports.name, otSchema);
};
