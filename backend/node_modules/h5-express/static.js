// Part of <https://miracle.systems/p/walkner-wmes> licensed under <CC BY-NC-SA 4.0>

'use strict';

const path = require('path');
const express = require('express');
const parseurl = require('parseurl');
const wrapAmd = require('./wrapAmd');
let ejs = null;
let ejsAmd = null;
let messageFormatAmd = null;
let iconv = false;

/* eslint-disable no-empty */

try { ejs = require('ejs'); } catch (err) {}
try { ejsAmd = require('ejs-amd'); } catch (err) {}
try { messageFormatAmd = require('messageformat-amd'); } catch (err) {}
try { iconv = require('iconv-lite').encodingExists('UTF-8'); } catch (err) {}

/* eslint-enable no-empty */

try { require('iconv-lite').encodingExists('UTF-8'); }
catch (err) {} // eslint-disable-line no-empty

exports.DEFAULT_CONFIG = {
  staticPath: 'public',
  staticBuildPath: 'public-build',
  ejsAmdHelpers: {}
};

exports.start = (app, expressModule) =>
{
  /* eslint-disable curly */
  if (!ejs) expressModule.debug('Unused dependency: ejs');
  if (!ejsAmd) expressModule.debug('Unused dependency: ejs-amd');
  if (!messageFormatAmd) expressModule.debug('Unused dependency: messageformat-amd');
  if (!iconv) expressModule.debug('Unused dependency: iconv-lite');
  /* eslint-enable no-empty */

  const {config} = expressModule;
  const development = app.options.env === 'development';
  const staticPath = config[development ? 'staticPath' : 'staticBuildPath'];
  const expressApp = express();

  expressModule.staticPath = staticPath;

  expressModule.app = expressApp;

  expressApp.set('trust proxy', true);
  expressApp.set('x-powered-by', false);

  if (ejs)
  {
    expressApp.engine('ejs', ejs.renderFile);
    expressApp.set('view engine', 'ejs');
    expressApp.set('views', app.pathTo('templates'));
  }

  if (development)
  {
    expressApp.set('json spaces', 2);
  }

  if (development)
  {
    setUpDevMiddleware(staticPath);
  }

  expressApp.use(express.static(staticPath));

  /**
   * @private
   * @param {string} staticPath
   */
  function setUpDevMiddleware(staticPath)
  {
    if (ejsAmd)
    {
      ejsAmd.wrapAmd = wrapEjsAmd.bind(null, config.ejsAmdHelpers);

      const templateUrlRe = /^\/app\/([a-zA-Z0-9\-]+)\/templates\/(.*?)\.js$/;
      const ejsAmdMiddleware = ejsAmd.middleware({
        views: staticPath,
        client: true,
        compileDebug: false,
        escapeFunction: '_.escape',
        appendFunctionName: 'A_',
        async: false,
        rmWhitespace: true
      });

      expressApp.use((req, res, next) =>
      {
        const matches = parseurl(req).pathname.match(templateUrlRe);

        if (matches === null)
        {
          return next();
        }

        ejsAmdMiddleware(req, res, next);
      });
    }

    if (messageFormatAmd)
    {
      expressApp.use('/app/nls/locale/', messageFormatAmd.localeMiddleware());

      expressApp.use('/app/nls/', messageFormatAmd.nlsMiddleware({
        localeModulePrefix: 'app/nls/locale/',
        nlsDir: staticPath,
        jsonPath: (locale, nlsName) =>
        {
          const jsonFile = (locale === null ? 'root' : locale) + '.json';

          return path.join('app', nlsName, 'nls', jsonFile);
        }
      }));
    }
  }

  /**
   * @private
   * @param {Object} ejsAmdHelpers
   * @param {string} js
   * @returns {string}
   */
  function wrapEjsAmd(ejsAmdHelpers, js)
  {
    return wrapAmd('return ' + js, ejsAmdHelpers);
  }
};
